{"version":3,"file":"static/js/68.dd16aafc.chunk.js","mappings":"qOACA,EAA0B,yBAA1B,EAAiE,6BAAjE,EAA0I,0BCA1I,EAAyB,uB,mBCIZA,EAA+BC,EAAAA,MAAW,YAAiB,IAAfC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KACzD,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAI,YAAcJ,EAA3B,SAAgCC,KAG3C,ICVD,EAA0B,yBCIbI,EAAiCN,EAAAA,MAAW,YAAoB,IAAlBC,EAAiB,EAAjBA,GAAIM,EAAa,EAAbA,QAC3D,OACI,gBAAKJ,UAAWC,EAAWH,GAAIA,EAA/B,SAAoCM,GAE3C,I,+ECPYC,EAAa,SAACC,GAAD,OAA6BA,EAAMC,YAAYC,OAA/C,EACbC,EAAc,SAACH,GAAD,OAA6BA,EAAMC,YAAYG,QAA/C,E,oBCedC,EAAqB,WAC9B,IAAMC,GAAWC,EAAAA,EAAAA,KAEXC,GAASC,EAAAA,EAAAA,GAAeC,EAAAA,IACxBR,GAAUO,EAAAA,EAAAA,GAAeV,GACzBK,GAAWK,EAAAA,EAAAA,GAAeN,GAMhC,OAAKK,GAGD,iBAAKd,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKO,EAAQS,KAAI,SAAAC,GAAM,OAAI,SAACtB,EAAD,CACQE,GAAIoB,EAAOpB,GACXC,KAAMmB,EAAOnB,MAFRmB,EAAOpB,GAAxB,OAIvB,iBAAKE,UAAWC,EAAhB,UACKS,EAASO,KAAI,SAAAb,GAAO,OAAI,SAACD,EAAD,CACSL,GAAIM,EAAQN,GACZM,QAASA,EAAQA,SAFZA,EAAQN,GAA1B,KAGrB,SAACqB,EAAD,CAAqBC,SAjBX,SAACC,GACnBT,GAASU,EAAAA,EAAAA,IAAqBD,EAASE,iBACvCX,GAASY,EAAAA,EAAAA,IAAM,wBAClB,EAcyDC,YAAa,WAC1D,WAdO,SAAC,KAAD,CAAUvB,GAAG,UAkBpC,EAkBKiB,GAAsBO,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAhBsC,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aAChE,OACI,kBAAMR,SAAUQ,EAAhB,WACI,0BACI,SAACC,EAAA,EAAD,CAAO9B,KAAM,iBACN+B,UAAWC,EAAAA,EACXC,YAAa,cACbC,SAAU,CAACC,EAAAA,GAAUC,EAAAA,SAEhC,0BACI,iDAIf,IAID,GAAeC,EAAAA,EAAAA,GAAiBzB,E","sources":["webpack://socialnetwork-react18/./src/components/Body/Dialogs/Dialogs.module.css?29e2","components/Body/Dialogs/Dialog/Dialog.module.css","components/Body/Dialogs/Dialog/Dialog.tsx","components/Body/Dialogs/Message/Message.module.css","components/Body/Dialogs/Message/Message.tsx","redux/dialogsSelectors.ts","components/Body/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__KaSU2\",\"dialogItems\":\"Dialogs_dialogItems__NEmin\",\"active\":\"Dialogs_active__kbeJZ\",\"messages\":\"Dialogs_messages__92gi8\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Dialog_dialog__EpXwF\"};","import React from 'react'\nimport s from './Dialog.module.css'\nimport {NavLink} from 'react-router-dom'\nimport {DialogType} from '../../../../redux/dialogsReducer'\n\nexport const Dialog: React.FC<DialogType> = React.memo(({id, name}) => {\n    return (\n        <div className={s.dialog}>\n            <NavLink to={'/dialogs/' + id}>{name}</NavLink>\n        </div>\n    )\n})","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__oA+mj\"};","import React from 'react';\nimport s from './Message.module.css';\nimport {MessageType} from '../../../../redux/dialogsReducer';\n\n\nexport const Message: React.FC<MessageType> = React.memo(({id, message}) => {\n    return (\n        <div className={s.message} id={id}>{message}</div>\n    )\n})","import {AppRootStateType} from './reduxStore'\n\nexport const getDialogs = (state: AppRootStateType) => state.dialogsPage.dialogs\nexport const getMessages = (state: AppRootStateType) => state.dialogsPage.messages","import React from 'react'\nimport s from './Dialogs.module.css'\nimport {Dialog} from './Dialog/Dialog'\nimport {Message} from './Message/Message'\nimport {Field, InjectedFormProps, reduxForm, reset} from 'redux-form'\nimport {useAppDispatch, useAppSelector} from '../../../hooks/hooks'\nimport {sendNewMessageBodyAC} from '../../../redux/dialogsReducer'\nimport {maxLength300, required} from '../../../utils/validators/validators'\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\nimport {Textarea} from '../../common/FormsControls/FormsControls'\nimport {getDialogs, getMessages} from '../../../redux/dialogsSelectors'\nimport {Navigate} from 'react-router-dom'\nimport {getIsAuth} from '../../../redux/authSelectors'\n\ntype FormDataType = {\n    newMessageBody: string\n}\n\nexport const DialogsForRedirect = () => {\n    const dispatch = useAppDispatch()\n\n    const isAuth = useAppSelector(getIsAuth)\n    const dialogs = useAppSelector(getDialogs)\n    const messages = useAppSelector(getMessages)\n\n    const addNewMessage = (formData: FormDataType) => {\n        dispatch(sendNewMessageBodyAC(formData.newMessageBody))\n        dispatch(reset('dialogAddMessageForm'))\n    }\n    if (!isAuth) return <Navigate to=\"/login\"/>\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogItems}>\n                {dialogs.map(dialog => <Dialog key={dialog.id}\n                                               id={dialog.id}\n                                               name={dialog.name}/>)}\n            </div>\n            <div className={s.messages}>\n                {messages.map(message => <Message key={message.id}\n                                                  id={message.id}\n                                                  message={message.message}/>)}\n                <AddMessageFormRedux onSubmit={addNewMessage} clearSubmit={() => {\n                }}/>\n            </div>\n        </div>\n    )\n}\n\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field name={'newMessageBody'}\n                       component={Textarea}\n                       placeholder={'New Message'}\n                       validate={[required, maxLength300]}/>\n            </div>\n            <div>\n                <button>Send message</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\n\nexport default withAuthRedirect(DialogsForRedirect)"],"names":["Dialog","React","id","name","className","s","to","Message","message","getDialogs","state","dialogsPage","dialogs","getMessages","messages","DialogsForRedirect","dispatch","useAppDispatch","isAuth","useAppSelector","getIsAuth","map","dialog","AddMessageFormRedux","onSubmit","formData","sendNewMessageBodyAC","newMessageBody","reset","clearSubmit","reduxForm","form","handleSubmit","Field","component","Textarea","placeholder","validate","required","maxLength300","withAuthRedirect"],"sourceRoot":""}